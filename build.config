# ######################################################################
# First, set your project name and version here.
PROJNAME=phocus
VERSION=0.0.1

# ######################################################################
# These are used to create packages.

# First, the maintainer and project details
MAINTAINER=lelanthran <lelanthran@gamil.com>
HOMEPAGE=http://www.lelanthran.com

# The section that this software belongs in
SECTION=custom

# The dependencies for this software to run (not build). The dependencies for
# building are specified below in the EXTRA_LIBS section (and entries for build
# dependencies have to be in the HEADERS field).
#
# The dependencies must be specified as a comma-seperated list of package names,
# with an optional version of that package in parenthesis.
DEPENDS=

# Define a description that will go into the package.
#
define DESCRIPTION
A full description of your project.

The first line is a short synopsis of this project. Everything after is
a comprehensive description of the project.

Note that multiline works properly, and that any indentation herein
is preserved. To produce verbatim text indent each line with a single
space character.

endef

# ######################################################################
# Set the main (executable) source files. These are all the source files
# that have a 'main' function. Note that you must specify the filename
# without the extension, so don't specify 'myfile.c', just specify
# 'myfile'.
#
# Note that this list is only for C files.
MAIN_PROGRAM_CSOURCEFILES=\
   phocus

# ######################################################################
# Set the main (executable) source files. These are all the source files
# that have a 'main' function. Note that you must specify the filename
# without the extension, so don't specify 'myfile.c', just specify
# 'myfile'.
#
# Note that this list is only for C++ files.
MAIN_PROGRAM_CPPSOURCEFILES=\


# ######################################################################
# Set each of the source files that must be built. These are all those
# source files (both .c and .cpp) that *DON'T* have a main function. All
# of these files will be compiled into a single library (sorry, I do not
# have plans to allow multiple library files to be built).
#
# Note once again that you must not specify the file extension.
# Unfortunately you are not allowed to have two object files that have the
# same name save for the extension. For example, you cannot have 'myfile.c'
# and 'myfile.cpp' in the same project, although it is allowed
# (encouraged even) to have either 'myfile.c' or 'myfile.cpp' together
# with 'myfile.h'.
#
# Note that this list is only for C files.
LIBRARY_OBJECT_CSOURCEFILES=\
   phoc

# ######################################################################
# Set each of the source files that must be built. These are all those
# source files (both .c and .cpp) that *DON'T* have a main function. All
# of these files will be compiled into a single library (sorry, I do not
# have plans to allow multiple library files to be built).
#
# Note once again that you must not specify the file extension.
# Unfortunately you are not allowed to have two object files that have the
# same name save for the extension. For example, you cannot have 'myfile.c'
# and 'myfile.cpp' in the same project, although it is allowed
# (encouraged even) to have either 'myfile.c' or 'myfile.cpp' together
# with 'myfile.h'.
#
# Note that this list is only for C++ files.
LIBRARY_OBJECT_CPPSOURCEFILES=\



# ######################################################################
# For now we set the headers manually. In the future I plan to use gcc to
# generate the dependencies that can be included in this file. Simply name
# all the header files you wrote for this project. Note that unlike the
# previous settings, for this setting you must specify the path to the
# headers (relative to this directory).
HEADERS=\
   src/phoc.h\


# ######################################################################
# Here you must set the list of include paths. Note that the variable
# $(HOME) is available if you have include directories relative to your
# home directory. $(HOME) works correctly on Windows as well.
#
# You can put as many paths in here as you want to. I've put one in as an
# example (to my home directory include) and one to the openjdk on my system
# for jni functionality.
INCLUDE_PATHS=\
   $(HOME)/include\
   /usr/lib/jvm/java-11-openjdk-amd64/include\
   /usr/lib/jvm/java-11-openjdk-amd64/include/linux

# ######################################################################
# This is similar to the INCLUDE_PATHS you set above, except that it is
# for the library search paths. $(HOME) is available if you have library
# directories relative to your home directory. $(HOME) works correctly
# on Windows as well.
#
# You can put as many paths in here as you want to. I've put one in as an
# example. See the variable LIBRARY_FILES to set the actual libraries you
# want to link in.
LIBRARY_PATHS=\
   $(INSTALL_PREFIX)/lib/$(TARGET)


# ######################################################################
# This is for specifying extra libraries. Note that you must only specify
# the library name, and neither the extension nor the prefix 'lib'.
#
# These files *MUST* be in the library search path specified with
# LIBRARY_PATHS.
#
# I've put in an example here that is commented out, so that you can see
# how the files are supposed to be specified but, because it is commented
# out, it will not break the build process if this library is not
# installed.
#
# (If it is not commented out, go ahead and comment it out when the build
# fails)
#LIBRARY_FILES=\
#   ds


# ######################################################################
# Here you set extra compiler flags that are common to both the C++ and
# the C compiler. You can comment this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_COMPILER_FLAGS=\
   -DNAME=Value\
   -W -Wall


# ######################################################################
# Here you set extra compiler flags for the C compiler only. You can comment
# this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_CFLAGS=\
   -std=c99


# ######################################################################
# Here you set extra compiler flags for the C++ compiler only. You can
# comment this line out with no ill-effects.
#
# Note that this does not override the existing flags, it only adds to
# them
EXTRA_CXXFLAGS=\
   -std=c++11


# ######################################################################
# You can add in extra flags to the linker here, for the library. This
# does not override the existing flags, it adds to them.
#
EXTRA_LIB_LDFLAGS=\



# ######################################################################
# You can add in extra flags to the linker here, for the programs. This
# does not override the existing flags, it adds to them.
#
EXTRA_PROG_LDFLAGS=\
   


# ######################################################################
# The default compilers are gcc and g++. If you want to specify something
# different, this is the place to do it. This is useful if you want to
# cross-compile, or use a different gcc/g++ than the one in your path, or
# simply want to use clang instead.
#
# Note that only clang and gcc are supported (due to reliance on the
# compiler command-line options).
#
# You can comment this out with no ill-effects.
GCC?=gcc
GXX?=g++
LD_PROG?=gcc
LD_LIB?=gcc

# ######################################################################
# If you need need to call your library from other languages, set the
# SWIG targets here, using 'wrap-$language' as a target. The SWIG_WRAPPERS
# can be left empty if this is not needed.
#
# Note that to use SWIG:
#  1. It must be installed,
#  2. The swig-input.swig file must be modified for your project.
#
# An example of basic SWIG usage can be found at:
#        http://swig.org/tutorial.html
#
SWIG_WRAPPERS:=\
   wrap-java


# ######################################################################
# TODO: Add in a way to override the default linker
#


